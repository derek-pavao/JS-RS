import {Path} from './annotations/path';
import {GET} from './annotations/GET';
import {POST} from './annotations/POST';
import {PUT} from './annotations/PUT';
import {DELETE} from './annotations/DELETE';
import {ReturnsArray} from './annotations/returns-array';
import {ReturnsObject} from './annotations/returns-object';
import {HTTPRequest} from './libs/http-request';

export class Resource {

    constructor() {
        this.basePath = '';
        this.parseClassMetaData();
        this.parseMethodMetaData();
    }


    parseClassMetaData() {
        if (this.constructor.annotations) {
            this.constructor.annotations.forEach((annotation) => {
                if (annotation instanceof Path) {
                    this.basePath = annotation.path;
                }
            });
        }
    }


    parseMethodMetaData() {
        for (var methodName in this) {
            if (!this.hasOwnProperty(methodName) && this[methodName].annotations) {
                let isResourceMethod = false;

                this[methodName].annotations.forEach((annotation) => {
                    if (annotation instanceof Path) {
                        this.parsePathAnnotation(methodName, annotation);
                        isResourceMethod = true;
                    } else if (annotation instanceof GET) {
                        this.parseGetAnnotation(methodName);
                    } else if (annotation instanceof POST) {
                        this.parsePostAnnotation(methodName);
                    } else if (annotation instanceof PUT) {
                        this.parsePutAnnotation(methodName);
                    } else if (annotation instanceof DELETE) {
                        this.parseDeleteAnnotation(methodName);
                    } else if (annotation instanceof ReturnsArray) {
                        this.parseReturnsArrayAnnotation(methodName, annotation);
                    } else if (annotation instanceof ReturnsObject) {
                        this.parseReturnsObjectAnnotation(methodName, annotation);
                    }
                });
                if (isResourceMethod) {
                    this.redefineMethod(methodName);
                }
            }
        }


    }

    parsePathAnnotation(methodName: string, annotation: Object) {
        this[methodName].path = this.basePath + annotation.path;
    }

    parseGetAnnotation(methodName) {
        this[methodName].restMethod = 'GET';
    }

    parsePostAnnotation(methodName) {
        this[methodName].restMethod = 'POST';
    }

    parsePutAnnotation(methodName) {
        this[methodName].restMethod = 'PUT';
    }

    parseDeleteAnnotation(methodName) {
        this[methodName].restMethod = 'DELETE';
    }

    parseReturnsArrayAnnotation(methodName, annotation) {
        this[methodName].returnsArray = true;
    }

    parseReturnsObjectAnnotation(methodName, annotation) {
        this[methodName].returnsArray = false;
    }


    redefineMethod(methodName: string) {
        var restMethod = this[methodName].restMethod.toLowerCase();
        var path = this[methodName].path;

        this[methodName] = function (data:Object = null) {
            var httpRequest = HTTPRequest[restMethod](path);
            return httpRequest.send(data);
        }
    }



}