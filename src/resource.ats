import {Path} from './annotations/path';
import {GET} from './annotations/GET';
import {POST} from './annotations/POST';
import {PUT} from './annotations/PUT';
import {DELETE} from './annotations/DELETE';
import {PathParam} from './annotations/path-param';
import {QueryParam} from './annotations/query-param';
import {RequestBody} from './annotations/request-body';
import {ReturnsArray} from './annotations/returns-array';
import {ReturnsObject} from './annotations/returns-object';
import {HTTPRequest} from './libs/http-request';
import {Headers} from './annotations/headers';
import {HeadersParam} from './annotations/headers-param';

export class Resource {

    constructor() {
        this.basePath = '';
        this.parseClassMetaData();
        this.parseMethodMetaData();
    }


    parseClassMetaData() {
        if (this.constructor.annotations) {
            this.constructor.annotations.forEach((annotation) => {
                if (annotation instanceof Path) {
                    this.basePath = annotation.path;
                } else if (annotation instanceof Headers) {
                    this.headers = annotation.headerObj;
                }
            });
        }
    }


    parseMethodMetaData() {
        for (var methodName in this) {

            if (!this.hasOwnProperty(methodName) && this[methodName].annotations) {
                let isResourceMethod = false;

                this[methodName].annotations.forEach((annotation) => {

                    if (annotation instanceof Path) {
                        this.parsePathAnnotation(methodName, annotation);

                    } else if (annotation instanceof GET) {
                        this.parseGetAnnotation(methodName);
                        isResourceMethod = true;
                    } else if (annotation instanceof POST) {
                        this.parsePostAnnotation(methodName);
                        isResourceMethod = true;
                    } else if (annotation instanceof PUT) {
                        this.parsePutAnnotation(methodName);
                        isResourceMethod = true;
                    } else if (annotation instanceof DELETE) {
                        this.parseDeleteAnnotation(methodName);
                        isResourceMethod = true;
                    } else if (annotation instanceof ReturnsArray) {
                        this.parseReturnsArrayAnnotation(methodName, annotation);
                    } else if (annotation instanceof ReturnsObject) {
                        this.parseReturnsObjectAnnotation(methodName, annotation);
                    } else if (annotation instanceof Headers) {
                        this.parseHeadersAnnotation(methodName, annotation);
                    }
                });
                if (isResourceMethod) {
                    this.redefineMethod(methodName);
                }
            }
        }


    }

    parseParameterMetaData(func) {
        var ret = {pathParams: [], queryParams: [], body: null, headers: null};
        if (typeof func.parameters !== 'undefined') {

            func.parameters.forEach(function (parameter, parameterIndex) {

                parameter.forEach(function (parameterAnnotation) {
                    parameterAnnotation.argumentPosition = parameterIndex;

                    if (parameterAnnotation instanceof PathParam) {
                        ret.pathParams.push(parameterAnnotation);
                    } else if (parameterAnnotation instanceof QueryParam) {
                        ret.queryParams.push(parameterAnnotation);
                    } else if (parameterAnnotation instanceof RequestBody) {
                        ret.requestBody = parameterAnnotation;
                    } else if (parameterAnnotation instanceof HeadersParam) {
                        ret.headers = parameterAnnotation;
                    }
                }.bind(this));
            }.bind(this));
        }

        return ret;
    }


    parsePathAnnotation(methodName: string, annotation: Object) {
        this[methodName].path = annotation.path;
    }

    parseGetAnnotation(methodName) {
        this[methodName].restMethod = 'GET';
    }

    parsePostAnnotation(methodName) {
        this[methodName].restMethod = 'POST';
    }

    parsePutAnnotation(methodName) {
        this[methodName].restMethod = 'PUT';
    }

    parseDeleteAnnotation(methodName) {
        this[methodName].restMethod = 'DELETE';
    }

    parseReturnsArrayAnnotation(methodName, annotation) {
        this[methodName].returnsArray = true;
    }

    parseReturnsObjectAnnotation(methodName, annotation) {
        this[methodName].returnsArray = false;
    }

    parseHeadersAnnotation(methodName, annotation) {
        this[methodName].headers = annotation.headerObj;
    }

    pathBuilder(pathPattern:string, pathParams:Array, queryParams:Array, args):string {
        var path = pathPattern,
            queryString = '?';
        pathParams.forEach(function (pathParam) {
            path = path.replace('{' + pathParam.paramName + '}', args[pathParam.argumentPosition]);
        });

        queryParams.forEach(function (queryParam) {
            var paramValue = args[queryParam.argumentPosition];
            if (paramValue !== null && typeof paramValue !== 'undefined') {
                queryString += queryParam.paramName + '=' + args[queryParam.argumentPosition] + '&';
            }
        });
        if (queryString === '?') {
            return path;
        } else {
            if (queryString[queryString.length - 1] === '&') {
                queryString = queryString.substr(0, queryString.length - 1);
            }
            return path + queryString;
        }

    }


    redefineMethod(methodName: string) {
        var pathPattern;
        var restMethod = this[methodName].restMethod.toLowerCase();
        var parameterMetaData = this.parseParameterMetaData(this[methodName]);
        var methodHeaders = {};
        if (typeof this[methodName].headers !== 'undefined') {
            methodHeaders = this[methodName].headers;
        }

        if (typeof this[methodName].path === 'undefined') {
            pathPattern = this.basePath;
        } else {
            pathPattern = this.basePath + this[methodName].path;
        }



        this[methodName] = function () {

            var path = this.pathBuilder(pathPattern, parameterMetaData.pathParams, parameterMetaData.queryParams, arguments);

            console.log('path', path);
            var httpRequest = HTTPRequest[restMethod](path);

            var headers = Object.assign({}, (this.headers || {}), methodHeaders);
            if (parameterMetaData.headers !== null) {
                headers = Object.assign(headers, arguments[parameterMetaData.headers.argumentPosition]);
            }

            httpRequest.setRequestHeaders(headers);

            return httpRequest.send(parameterMetaData.requestBody);
        }
    }



}