export class HTTPRequest {

    constructor(options) {
        this.options = options;

    }

    send(data = null): Promise {
        return new Promise((resolve, reject) => {

            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
                try {
                    var json = JSON.parse(this.responseText);
                    resolve(json);
                } catch (e) {
                    resolve(this.responseText);
                }
            };

            xhr.open(this.options.method, this.options.path, true);
            xhr.send();
        });

    }

    static get(path: string, options: Object = {}): HTTPRequest {
        Object.assign(options, {path, method: 'GET'});
        return new HTTPRequest(options);
    }

    static post(path: string, options: Object = {}): HTTPRequest {
        Object.assign(options, {path, method: 'POST'});
        return new HTTPRequest(options);
    }

    static put(path: string, options: Object = {}): HTTPRequest {
        Object.assign(options, {path, method: 'PUT'});
        return new HTTPRequest(options);
    }

    static delete(path: string, options: Object = {}): HTTPRequest {
        Object.assign(options, {path, method: 'DELETE'});
        return new HTTPRequest(options);
    }
}