import {ExampleResource} from './example-resource';
import {MockedResponses} from './mocked-responses';




describe('Resource', function () {
    var exampleResource;

    beforeEach(function () {
        exampleResource = new ExampleResource();
    });

    it ('should pass', function () {
        expect(true).toBe(true);

    });

    it ('should be instanceof ExampleResource', function() {
        expect(exampleResource instanceof ExampleResource).toBe(true);
    });

    describe ('ExampleResource#queryExampleResource()', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });

        afterEach(function () {
            jasmine.Ajax.uninstall();
        });

        it ('should make a GET request to /example-resource/example when called', function (done) {

            exampleResource.queryExampleResource().then(function (res) {
                expect(typeof res).toBe('object');
                expect(res.status).toBe('ok');
                done();
            });

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.successfulTestGetResponse());

            expect(request.url).toBe('/example-resource');
        });

        it ('should be able to parse QueryParam annotations in the function arguments', function (done) {

            exampleResource.queryExampleResource('asc').then(function (res) {
                expect(typeof res).toBe('object');
                expect(res.status).toBe('ok');
                done();
            });

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.successfulTestGetResponse());

            expect(request.url).toBe('/example-resource?sort=asc');
        });

    });


    describe ('ExampleResource#postExampleResource()', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });

        afterEach(function () {
            jasmine.Ajax.uninstall();
        });

        it ('should make a POST request to /example-resource/example when called', function (done) {

            exampleResource.postExampleResource().then(function (res) {
                done();
                expect(typeof res).toBe('object');
                expect(res.status).toBe('ok');

            });

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.successfulTestPostResponse());
        });

        it ('should be able to parse a RequestBody anotation in its paramters', function (done) {
            var testModel = {firstName: 'Derek', lastName: 'Pavao'};
            exampleResource.postExampleResource(testModel).then(function () {
                done();
            });

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.successfulTestPostResponse());

            // need to find out how to assert body of the request

        });
    });

    describe ('ExampleResource#getExampleResource()', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });

        afterEach(function () {
            jasmine.Ajax.uninstall();
        });

        it ('should be able to parse @PathParam in arguments', function (done) {
            exampleResource.getExampleResource(1).then(function (res) {
                expect(typeof res).toBe('object');
                done();
            });

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.succesfulTestGetOneResponse());
            expect(request.url).toBe('/example-resource/1');

        });

    });

    describe ('ExampleResource#getHeadersTest()', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });

        afterEach(function () {
            jasmine.Ajax.uninstall();
        });

        it ('should be able to parse @HeadersParam in arguments', function (done) {
            exampleResource.getHeadersTest({'Content-Type': 'Some-Awesome-Content-Type'}).then(done);

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.successfulTestGetResponse());
            expect(request.requestHeaders['Content-Type']).toBe('Some-Awesome-Content-Type');

        });
    });



});
