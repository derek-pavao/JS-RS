import {TestResource} from './test-resource';
import {MockedResponses} from './mocked-responses';




describe('Resource', function () {
    var testResource;

    beforeEach(function () {
        testResource = new TestResource();
    });

    it ('should pass', function () {
        expect(true).toBe(true);

    });

    it ('should be instanceof TestResource', function() {
        expect(testResource instanceof TestResource).toBe(true);
    });

    describe ('TestResource#queryTestResource()', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });

        afterEach(function () {
            jasmine.Ajax.uninstall();
        });

        it ('should make a GET request to /test-resource/test when called', function (done) {

            testResource.queryTestResource().then(function (res) {
                expect(typeof res).toBe('object');
                expect(res.status).toBe('ok');
                done();
            });

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.successfulTestGetResponse());

            expect(request.url).toBe('/test-resource/test');
        });

        it ('should be able to parse QueryParam annotations in the function arguments', function (done) {
            testResource.queryTestResource('asc').then(function (res) {
                expect(typeof res).toBe('object');
                expect(res.status).toBe('ok');
                done();
            });

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.successfulTestGetResponse());

            expect(request.url).toBe('/test-resource/test?sort=asc');
        });

    });


    describe ('TestResource#postTestResource()', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });

        afterEach(function () {
            jasmine.Ajax.uninstall();
        });

        it ('should make a POST request to /test-resource/test when called', function (done) {

            testResource.postTestResource().then(function (res) {
                expect(typeof res).toBe('object');
                expect(res.status).toBe('ok');
                done();
            });

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.successfulTestPostResponse());

        });
    });

    describe ('TestResource#getTestResource()', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });

        afterEach(function () {
            jasmine.Ajax.uninstall();
        });

        it ('should be able to parse @PathParam in arguments', function (done) {
            testResource.getTestResource(1).then(function (res) {
                expect(typeof res).toBe('object');
                done();
            });

            var request = jasmine.Ajax.requests.mostRecent();
            request.respondWith(MockedResponses.succesfulTestGetOneResponse());
            expect(request.url).toBe('/test-resource/test/1');

        });

    });



});